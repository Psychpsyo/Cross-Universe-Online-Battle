html {
	--p0-card-back: url('');
	--p1-card-back: url('');
	--left-panel-width: 30vw;
}

body {
	overflow: hidden;
}

#gameFlexBox {
	display: flex;
}

.leftField #gameFlexBox {
	flex-direction: row-reverse;
}

#mainGameArea {
	position: relative;
	flex-grow: 1;
	touch-action: none;

	transform: scale(1);
	transition: transform .15s, background-position-y .2s; /* background-position-y should be in automaticGame.css but there it would override this  */
}
#leftPanel:not(:hover) + #mainGameArea.zoomedIn {
	transform: scale(5);
}

#fieldHolder {
	display: flex;
	height: 100vh;
	align-items: center;
	justify-content: center;
}

#field {
	position: relative;
	width: 100%;
	max-height: 70vh;
	font-size: min(2.5vh, calc(100vw / 39)); /* 39 from there being 6 phases in the phase display and every phase being 6.5em wide. (6.5 * 6 = 39) */

	user-select: none;
}

#field::before {
	content: "";
	display: block;
	position: absolute;
	width: 100%;
	height: 100%;
	filter: var(--theme-field-filter);

	background-image: url("../../images/field.jpg");
	background-size: contain;
	background-repeat: no-repeat;
	background-position: center;
}

#cardDetails {
	height: 65vh;
	aspect-ratio: 813 / 1185;

	overflow: visible;
	background: none;
	padding: 0;
	border: 0;
	color: var(--theme-text-color);
	text-align: left;

	position: absolute;
	top: 50%;
	--side-distance: -50vh;
	right: var(--side-distance);
	left: unset;
	transform: translateY(-50%);
	transition: right 0.2s ease-out;

	z-index: 500;
}
dialog #cardDetails {
	right: calc(var(--side-distance) - 20vw - 10%);
}
.leftField #cardDetails {
	left: var(--side-distance);
	transition: left 0.2s ease-out;
	right: unset;
}
.leftField dialog #cardDetails {
	left: calc(var(--side-distance) - 20vw - 10%);
	right: unset;
}

#cardDetailsControl {
	position: absolute;
	top: -2em;
	right: 0;
	height: 2em;
	width: 5em;

	display: flex;
	align-items: center;

	background-color: var(--theme-dialog-background-color);
	border-bottom: none;
	border-radius: 1em 1em 0px 0px;
}
.leftField #cardDetailsControl {
	left: 0;
	right: unset;
}

#cardDetailsControl > * {
	width: 50%;
	line-height: 2em;
}

#cardDetailsControl > :first-child {
	border-top-left-radius: 1em;
	border-right: none;
}

#cardDetailsControl > :last-child {
	border-top-right-radius: 1em;
}

#cardDetailsText {
	height: 100%;

	background-color: var(--theme-dialog-background-color);
	border: 2px var(--theme-border-color) solid;
	border-radius: 1em 0 1em 1em;

	overflow-y: auto;
}
.leftField #cardDetailsText {
	border-radius: 0 1em 1em 1em;
}

#cardDetailsName, #cardDetailsInfo, .cardDetailsEffect {
	border-bottom: 2px var(--theme-border-color) solid;
	padding: .25em .5em;
}

#cardDetailsAttackDefense {
	display: flex;
}

#cardDetailsAttackDefense > span {
	flex-grow: 1;
}

#cardDetailsEffectList > :last-child {
	border-bottom: none;
}

.cardDetailsIndent {
	text-indent: calc(0px - var(--indent-amount));
	margin-left: var(--margin-amount);
}

#cardDetailsImage {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-size: contain;
}

#leftPanel {
	display: flex;
	flex-direction: column;
	width: var(--left-panel-width);
	flex-shrink: 0;
	height: 100vh;
	z-index: 100;

	border-right: 2px var(--theme-border-color) solid;
	background-color: var(--theme-shadow);
	backdrop-filter: blur(var(--theme-shadow-blur));
}
.leftField #leftPanel {
	border-right: none;
	border-left: 2px var(--theme-border-color) solid;
}
#leftPanel > :not(:last-child) {
	border-bottom: 2px solid var(--theme-border-color);
}

#infoPanel {
	position: relative;
	display: flex;
	white-space: nowrap;
}
#infoPanel > hr {
	margin: 0;
}
.playerInfoSide {
	position: relative;
	width: 50%;
	padding: .6em;
}
#playerInfoSide0 {
	padding-left: .9em;
}
#playerInfoSide1 {
	padding-right: .9em;
}
.playerInfoHolder {
	display: flex;
	flex-direction: column;
	align-items: center;
	text-align: center;
	transition: filter 1s;
}
.profilePictureHolder {
	position: relative;
	width: 70%;
	margin-bottom: .5em;
}
.profilePictureHolder profile-picture {
	width: 100%;
	--border-width: 4px;
	transition: filter 1s;
}
.username {
	position: absolute;
	left: 50%;
	bottom: -5%;
	transform: translateX(-50%);
	font-size: .75em;
}
.playerInfoValueHolder {
	width: 80%;
	display: flex;
	justify-content: space-between;
}
.playerDeckButton {
	position: absolute;
	top: .3em;
	left: .3em;
	height: 2em;
}

.valueUp {
	font-weight: bold;
	color: #0f0;
}
.valueDown {
	font-weight: bold;
	color: #f00;
}
.valueGone {
	filter: opacity(50%);
	text-decoration: line-through;
}
.valueAdded {
	font-weight: bold;
}

#gameInteractions {
	text-align: center;
	padding: .5em;
}
#gameInteractions > div:not(:last-child) {
	padding-bottom: .5em;
}

#playerGrids {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: space-between;

	height: 100%;
	max-height: 70vh;
	aspect-ratio: 1308 / 1024;
	margin: 0 auto;
}

.playerGrid {
	/* these have no basis whatsoever. It just lines up nicely with the official playmat image */
	aspect-ratio: 84.75 / 32;
	height: 46%;
	display: grid;

	grid-template-rows: 1fr 1fr;
	grid-template-columns: repeat(7, 1fr);
}

#p0Grid > :last-child {
	grid-column-start: 7;
	grid-row-start: 1;
	grid-row-end: 3;
}

#discard0, #exile0, #deck0 {
	transform: rotate(180deg);
}

#p0Grid .fieldCardContainer .card {
	transform: translate(-50%, -50%) rotate(180deg);
}

#p1Grid > :first-child {
	grid-column-start: 1;
	grid-row-start: 1;
	grid-row-end: 3;
}

#field .card {
	width: 85%;
	margin: auto;
	z-index: 1;
}

img[src$="cardBackFrameP0.png"], img[src$="cardBackFrameP1.png"] {
	background-size: cover;
	background-position: center;
}
img[src$="cardBackFrameP0.png"] {
	background-image: var(--p0-card-back), url("../../images/cardBack.jpg");
}
img[src$="cardBackFrameP1.png"] {
	background-image: var(--p1-card-back), url("../../images/cardBack.jpg");
}

.fieldCardContainer {
	position: relative;
	width: 100%;
	min-height: 100%;
	perspective: 1000px;
}

.fieldCardContainer .card {
	position: relative;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

.cardBtns {
	display: none;
	pointer-events: none;
	width: 100%;
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	z-index: 50;
}
.cardBtns.visible {
	display: block;
}
.cardBtns > button {
	pointer-events: all;
	position: relative;
	left: 50%;
	transform: translateX(-50%);
	white-space: pre;
	padding: 0 .4em;
}
.cardBtns > button.active {
	background-color: orange;
}
.cardBtns.noClick > button {
	pointer-events: none;
}
.fieldCardContainer:hover .cardActionHolder, .alwaysShowCardButtons .cardActionHolder {
	display: block;
}


.overlayText {
	color: #eee;
	font-weight: bold;
	filter: drop-shadow(0 0 .1em black) drop-shadow(0 0 .1em black) drop-shadow(0 0 .1em black) drop-shadow(0 0 .3em black);
}
.fieldCardAmountDisplay {
	position: absolute;
	text-align: center;
	left: 0;
	width: 100%;
	top: 50%;
	transform: translateY(-50%);
	font-size: 1.3em;
	pointer-events: none;
	z-index: 2;
}

.exileHolder {
	position: absolute;
	left: 0;
	top: 50%;
	transform: translateY(-50%);
	width: 100%;
	height: 50%;
}

/* Card Dragging Related */

.dragCard {
	position: absolute;
	max-width: 12vh;
	transition: transform 0.3s ease-out;
	transform: translate(-50%, -50%);

	user-select: none;
	z-index: 90;
}
#yourDragCard {
	pointer-events: none;
	z-index: 95;
}
.dragCard[src="images/cardHidden.png"] {
	pointer-events: none;
}

.dragSource {
	opacity: .5;
}

/* Player's Hand */

.hand {
	position: absolute;
	height: 23vh;
	display: flex;
	justify-content: center;
	align-items: end;
	left: 50%;
	transform: translateX(-50%);
	width: 95%;
	z-index: 1;

	border-radius: 1em;
	backdrop-filter: blur(var(--theme-shadow-blur));

	--card-count: 0;
}

.hand .card {
	height: 25vh;
	width: 100vw / var(--card-count);
	user-select: none;
	margin-right: min(((var(--card-count) * (813 / 1185) * 25vh - (100% - 1.5em)) / (var(--card-count) - 1)) * -1, .1vw); /* (cardAmount * cardWidth - handMax) / (cardAmount - 1) */

	transition-property: transform;
	transition-duration: .1s;
}
#hand0 .card {
	transform: rotate(180deg) translateY(-2vh);
}

#hand1 :first-child {
	margin-left: .5vw;
}
#hand1 :last-child {
	margin-right: .5vw;
}
#hand0 :first-child {
	margin-right: .5vw;
}
#hand0 :last-child {
	margin-left: .5vw;
}

#hand0.shown .card:hover  {
	transform: rotate(180deg) translateY(-15%);
}
#hand0 .card.revealed {
	transform: rotate(180deg) translateY(-25%);
}
#hand1 .card:hover {
	transform: translateY(-15%);
}
#hand1 .card.revealed {
	transform: translateY(-25%);
}

#hand0 {
	top: -11vh;
	flex-direction: row-reverse;
	background: linear-gradient(var(--theme-shadow) 50%, var(--theme-shadow) 80%);
}
#hand0.shown {
	background: linear-gradient(rgb(42, 72, 130) 50%, var(--theme-shadow) 80%);
}

#hand1 {
	bottom: -11vh;
	background: linear-gradient(var(--theme-shadow) 20%, var(--theme-shadow) 50%);
}
#hand1.shown {
	background: linear-gradient(var(--theme-shadow) 20%, rgb(42, 72, 130) 50%);
}

.sideBox {
	border: 2px var(--theme-border-color) solid;
	border-radius: .5em;
	background-color: #0001;
}
#deckDropPanel {
	position: relative;
	min-height: 8em;
	margin: .75em;
}
#deckDropTextContainer {
	position: absolute;
	width: 100%;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	text-align: center;
	pointer-events: none;
}
.clickableText {
	text-decoration: underline;
	cursor: pointer;
}
#deckSelectSpan {
	font-size: .6em;
	pointer-events: auto;
}
#fileSelectDeckLoader {
	display: none;
}
label[for="fileSelectDeckLoader"] {
	position: absolute;
	width: 100%;
	height: 100%;

	cursor: pointer;
}

#chatHolder {
	padding: .75em;
	flex-grow: 1;
}
.chatCardHolder > img {
	max-height: 5em;
}

dialog.popupSelectMenu {
	transform: translateX(-10%);
	width: 60vw;
	z-index: 100;
	overflow: visible;
}
.leftField .popupSelectMenu {
	transform: translateX(10%);
}

#cardSelector > :first-child, #cardChoiceMenu > :first-child {
	height: 80vh;
}

#cardSelectorGrid {
	display: grid;
	grid-template-columns: repeat(7, 1fr);
}

.cardListScrollParent {
	overflow-y: scroll;
	flex-grow: 1;
	touch-action: none;

	padding: 0 1em;

	/*hide scrollbar*/
	scrollbar-width: none;
	-ms-overflow-style: none;
}

.cardGrid img {
	width: 85%;
	margin: .3em auto;
	user-select: none;
}

.cardHighlight {
	box-shadow: 0px 0px .25em #ffd686;
	border: solid 1px #ffd686;
}

/*deck selector*/
#deckSelectorFlex {
	display: flex;
	height: 80vh;
}

#deckSelectorList {
	display: flex;
	flex-direction: column;
	min-width: 35%;
	border-right: 2px var(--theme-border-color) solid;
}
.deckListDisable #deckSelectorList {
	display: none;
}

#deckList {
	overflow-y: scroll;
	flex: auto;

	/*hide scrollbar*/
	scrollbar-width: none;
	-ms-overflow-style: none;
}

#deckListHeader {
	display: flex;
	height: 2em;
	align-items: stretch;
}

#deckListHeader > * {
	border-top: none;
	border-right: none;
	flex-grow: 1;
}

#deckListHeader > :first-child {
	border-left: none;
}

#loadSelectedDeckBtn {
	height: 2em;
	border-left: none;
	border-right: none;
	border-bottom: none;
	border-bottom-left-radius: 1em;
}

#deckList > * {
	padding: .5em .5em;
	line-height: 1em;
	text-align: left;
	border-top: none;
	border-left: none;
	border-right: none;
}

.deckCardAmount {
	font-size: .8em;
}

#selectedDeck {
	background-color: #126c;
}

#deckSelectorRight {
	display: flex;
	flex-direction: column;
	height: 100%;
	flex-grow: 1;
}

#deckSelectorRight > div {
	overflow-y: auto;
}

#deckSelectorCardGrid {
	flex-grow: 1;
	display: grid;
	grid-template-columns: repeat(6, 1fr);

	/*hide scrollbar*/
	scrollbar-width: none;
	-ms-overflow-style: none;
}

#deckSelectorDescription {
	min-height: 30%;
	padding: .25em .5em;
	border-top: 2px solid var(--theme-border-color);
	white-space: pre-wrap;
	text-align: left;
	font-size: .8em;
}
.deckListDisable #deckSelectorDescription {
	min-height: 20%;
}

.queryPopup {
	padding: 1em;
}
#questionPopupBtns {
	display: flex;
	justify-content: center;
	gap: 3em;
}

#cardChoiceArea {
	overflow-y: scroll;
	flex-grow: 1;
	text-align: left;
	padding-top: .25em;
}
#cardChoiceArea > hr {
	margin: .25em 0;
}
#cardChoiceArea .gridHeader {
	padding: 0 .5em;
}
#cardChoiceArea .cardGrid {
	display: grid;
	grid-template-columns: repeat(7, 1fr);
}
.unselectableCard {
	filter: grayscale() brightness(.5);
}

/* field labels */
.fieldLabel {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	text-align: center;
	font-size: .6em;
	color: black;
	font-weight: bold;
	white-space: pre;
	pointer-events: none;
}

.verticalFieldLabel {
	writing-mode: vertical-lr;
	font-size: 1em;
}

@property --content-opacity { /* needs to be interpolatable */
	syntax: "<number>";
	inherits: true;
	initial-value: 1;
}
#mainGameBlackout {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	color: #eee;
	background-color: #000b;
	z-index: 90;
	/* color is transitioned to support browsers that don't have @property yet. (Firefox, older Safari) */
	transition: color 2s, background-color 2.5s, --content-opacity 2s;
	--content-opacity: 1; /* also for Firefox, cause the @property initial-value doesn't work */
}
#mainGameBlackout.hidden {
	transition: color .5s, background-color .5s, --content-opacity 2s;
	color: transparent;
	background-color: transparent;
	--content-opacity: 0;
	pointer-events: none;
	user-select: none;
}
#mainGameBlackoutContent {
	height: 100%;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	gap: .5em;
	filter: opacity(var(--content-opacity)) drop-shadow(black 0 0 .15em);
}
#blackoutMessageHolder {
	text-align: center;
	font-weight: bold;
}
#blackoutMainMessage {
	font-size: 1.5em;
}
#blackoutSubtitle {
	font-size: .85em;
}
#showFieldBtn {
	position: absolute;
	bottom: 1em;
	right: 1em;
	filter: drop-shadow(black 0 0 .15em);
	z-index: 91;
}

/* counters */
.counterHolder {
	position: absolute;
	display: flex;
	width: 1.5em;
	z-index: 5;
	font-size: .8em;
	letter-spacing: -.1em;
}
#p0Grid .counterHolder {
	flex-direction: column-reverse;
	bottom: 0;
	left: 0;
}
#p1Grid .counterHolder {
	top: 0;
	right: 0;
	flex-direction: column;
}
.counter {
	text-align: center;
	background-color: black;
	border-radius: 50%;
	border: 2px var(--theme-border-color) solid;
}