/* Priority Indicator */
#mainGameArea {
	background-image: linear-gradient(transparent 75%, #00f8);
	background-size: 100% 200%;
	background-position-y: 50%;
}
#mainGameArea.yourMove {
	background-position-y: 100%;
}

/* card animations*/
@keyframes yourAttack {
	from {transform: translate3d(-50%, -50%, 0);}
	to   {transform: translate3d(calc(-50% + var(--atk-offset) * 100%), calc(-50% - var(--atk-distance) * 100%), 20vh);}
}
@keyframes opponentAttack {
	from {transform: translate3d(-50%, -50%, 0) rotate(180deg);}
	to   {transform: translate3d(calc(-50% + var(--atk-offset) * 100%), calc(-50% + var(--atk-distance) * 100%), 20vh) rotate(180deg);}
}

.attacking {
	z-index: 100;
}
.attacking .card {
	animation-duration: calc(.2s * var(--game-speed));
	animation-iteration-count: 2;
	animation-direction: alternate;
	animation-timing-function: ease-in-out;
}
#p0Grid .attacking .card {
	animation-name: opponentAttack;
}
#p1Grid .attacking .card {
	animation-name: yourAttack;
}

@keyframes yourActivation {
	0%   {transform: translate3d(-50%, -50%, 0);}
	85%  {transform: translate3d(-50%, -50%, 40vh);}
	100% {transform: translate3d(-50%, -50%, 40vh);}
}
@keyframes opponentActivation {
	0%   {transform: translate3d(-50%, -50%, 0) rotate(180deg);}
	85%  {transform: translate3d(-50%, -50%, 40vh) rotate(180deg);}
	100% {transform: translate3d(-50%, -50%, 40vh) rotate(180deg);}
}

.activating {
	z-index: 100;
}

#field .activating .card {
	animation-duration: calc(.5s * var(--game-speed));
	animation-iteration-count: 2;
	animation-direction: alternate;
	animation-timing-function: ease-in-out;
	z-index: 100;
}
#p0Grid .activating .card {
	animation-name: opponentActivation;
}
#p1Grid .activating .card {
	animation-name: yourActivation;
}


/* general UI stuff */
#phaseDisplay {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 100%;
}
#phaseDisplay > ol {
	display: flex;
	margin: 0;
	padding: 0;
	background-color: #000A;
	backdrop-filter: blur(var(--theme-shadow-blur));
	text-align: center;
	width: 100%;
	justify-content: center;

	list-style-type: none;
}
#phaseDisplay li {
	color: #eee;
	padding: .05em .2em;
	background-image: linear-gradient(transparent 50%, orange);
	background-size: 100% 200%;
	background-position-y: 0%;
	transition: background-position-y .25s;
	white-space: pre;
	flex-grow: 1;
	max-width: 6.5em;
}
#phaseDisplay .current {
	background-position-y: 100%;
}
#phaseDisplay .invalid {
	background-color: #0008;
	color: #eee8;
}

.turnDisplay {
	position: absolute;
	overflow: hidden;
}
#yourTurnDisplay {
	top: 100%;
	left: 0;
}
#opponentTurnDisplay {
	position: absolute;
	bottom: 100%;
	right: 0;
}
.turnDisplayLabel {
	color: #eee;
	background-color: #000A;
	transition: transform .35s;
	transform: translateY(0);
}
#yourTurnDisplayLabel {
	padding-left: .5em;
	padding-right: 1.5em;
	clip-path: polygon(0 0, 100% 0, calc(100% - 1em) 100%, 0 100%);
}
#yourTurnDisplayLabel.hidden {
	transform: translateY(-100%);
}
#opponentTurnDisplayLabel {
	padding-right: .5em;
	padding-left: 1.5em;
	clip-path: polygon(0 100%, 1em 0, 100% 0, 100% 100%);
}
#opponentTurnDisplayLabel.hidden {
	transform: translateY(100%);
}

#stackTitle {
	padding-left: .2em;
}
#stackTitle.invalid {
	filter: opacity(50%);
}
#controlPanel hr {
	border-bottom: 1px solid var(--theme-border-color);
	margin: 0;
}
#stackDisplayHolder {
	display: flex;
	flex-direction: row-reverse;
	height: 6.5em;
	padding: .25em;
	gap: .25em;

	/* Blocks are visually stacked if there is not enough space by doing roughly ((width of all blocks) - (total width)) / (number of blocks - 1) */
	container-type: inline-size;
	--block-margin: min((((var(--block-count) + 1) * ((813 / 1185) * 6em + .25em)) - 100cqw) / (var(--block-count) - 1) * -1, 0px);
}
.leftField #stackDisplayHolder {
	flex-direction: row;
}
#stackDisplayHolder img {
	height: 6em;
	user-select: none;
}
#stackDisplayHolder span {
	position: absolute;
	top: 75%;
	left: 50%;
	transform: translate(-50%, -50%);
	font-size: .75em;
	white-space: pre;
	text-align: center;
	pointer-events: none;
}
#stackDisplayHolder > div {
	position: relative;
}
#stackDisplayHolder > div:not(:last-child) {
	margin-left: var(--block-margin);
	transition: transform .2s;
}
.leftField #stackDisplayHolder > div:not(:last-child) {
	margin-left: 0;
	margin-right: var(--block-margin);
}
#stackDisplayHolder > div:not(:last-child):hover {
	transform: translateX(max((var(--block-margin) + .25em) * -1, 0px));
}
.leftField #stackDisplayHolder > div:not(:last-child):hover {
	transform: translateX(min(var(--block-margin) + .25em, 0px));
}

#stackDisplayHolder::after {
	content: attr(data-block);
	height: 100%;
	aspect-ratio: 813 / 1185;
	display: flex;
	justify-content: center;
	align-items: center;
	border: 2px dashed var(--theme-text-color);
	filter: opacity(50%);
	transition: color .5s, border-color .5s, filter .5s;
	word-break: keep-all;
	text-align: center;
	overflow: hidden;
}
#stackDisplayHolder.yourMove::after {
	color: orange;
	border-color: orange;
	filter: opacity(100%);
}

#automaticButtonArea {
	display: flex;
	justify-content: space-around;
	padding: .25em;
}
.leftField #automaticButtonArea {
	flex-direction: row-reverse;
}
#passMode {
	width: min-content;
	font-size: .75em;
}
#automaticButtonArea > button {
	box-shadow: orange 0 0 1em;
	transition: box-shadow .25s;
}
#automaticButtonArea > button:disabled {
	box-shadow: transparent 0 0 0em;
}

#opponentActionDisplay {
	position: absolute;
	top: 15%;
	left: 0;
	z-index: 100;
	transform: translate(-100%, -50%);
	max-width: 50%;
	background-color: #000A;
	border-radius: 0 1em 1em 0;
	padding: .1em .5em;
	transition: transform 0.2s ease-out;
}

#opponentActionDisplay.shown {
	transform: translate(0, -50%);
}

#typePopupSelection {
	min-width: 10em;
}

#itemOrderList {
	display: flex;
	flex-direction: column;
	gap: .5em;
	margin: .5em 0;
}
.itemOrderDiv {
	text-align: left;
	white-space: pre-wrap;
	border-radius: .5em;
	padding: .25em;
	padding-right: 1.75em;
}
.itemOrderDiv[data-index]::after {
	content: attr(data-index);
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	right: .3em;
	border: 2px var(--theme-border-color) solid;
	width: 1em;
	height: 1em;
	border-radius: 50%;
	text-align: center;
	line-height: 100%;
}

/* Cool Attack Visual */

#coolAttackVisual {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 200;
	background-color: transparent;
	transition: background-color calc(.5s * var(--game-speed));

	pointer-events: none;
}
#coolAttackVisual.visible {
	background-color: rgba(1, 1, 1, .75);
}
#coolAttackHolder {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%) skew(-5deg);

	width: 80%;
	display: flex;
}

.coolAttackSlot {
	position: relative;
	width: 100%;
	overflow: hidden;
	/* Some of these are accounting for weird artifacts around the borders of skewed elements, that's why the numbers are weird 1px / .1% stuff */
	border-left: 6px solid white;
	border-right: 6px solid white;
	margin: -1px;
	mask-image: linear-gradient(transparent .5%, black 7.5%, black 92.5%, transparent 99.5%);
	opacity: 0;

	animation-duration: calc(.05s * var(--game-speed));
	animation-timing-function: linear;
	animation-fill-mode: both;
	--anim-start: -1;
}
.coolAttackSlot:nth-child(2n) {
	--anim-start: 1;
}
.coolAttackSlot:not(:first-child) {
	flex-shrink: calc(1 + (var(--attacker-count) - 1) * .1);
}

.coolAttackImgHolder {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
	height: 100%;
	aspect-ratio: 1;
	overflow: hidden;
}
.coolAttackImgHolder:first-child {
	position: relative;
}
.coolAttackImgHolder > img {
	height: calc(180% * (1185/813));
	position: absolute;
	top: calc(-22.5% * (1185/813 * 1.8 - 1));
	left: calc(var(--left) * .8);
	transform: skew(5deg);
}

.coolAttackAnimBegin {
	animation-name: coolAttackEnter;
}
.coolAttackAnimEnd {
	animation-name: coolAttackLeave;
}
@keyframes coolAttackEnter {
	from {
		transform: translateY(calc(var(--anim-start) * 50vh));
		opacity: 0;
	}
	to {
		transform: translateY(0vh);
		opacity: 1;
	}
}
@keyframes coolAttackLeave {
	from {
		transform: translateY(0vh);
		opacity: 1;
	}
	to {
		transform: translateY(calc(var(--anim-start) * -50vh));
		opacity: 0;
	}
}


/* Card Overlay Values for Attack & Defense */
.cardValueOverlay {
	position: absolute;
	z-index: 1;
	left: 50%;
	font-size: .75em;
	white-space: nowrap;
	z-index: 25;

	pointer-events: none;
}
#p0Grid .cardValueOverlay {
	top: 0;
	transform: translate(-50%, -25%);
}
#p1Grid .cardValueOverlay {
	bottom: 0;
	transform: translate(-50%, 25%);
}